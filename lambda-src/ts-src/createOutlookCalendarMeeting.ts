import {ConfidentialClientApplication, RefreshTokenRequest} from '@azure/msal-node';
import {aadScopes} from './aadConfig';
import {AuthProviderCallback, Client, Options} from '@microsoft/microsoft-graph-client';
import {MeetingOptions} from './parseMeetingArgs';

export class AuthenticationError extends Error {
  constructor(message?: string) {
    super(message);
  }
}

export async function createOutlookCalendarMeeting(confidentialClientApplication: ConfidentialClientApplication,
  refreshToken: string, attendeeEmailAddresses: string[], meetingOptions: MeetingOptions, timeZone: string, meetingUrl: string) {
  
  const refreshTokenRequest: RefreshTokenRequest = {
    scopes: aadScopes,
    refreshToken: refreshToken
  };
  const authenticationResult = await confidentialClientApplication.acquireTokenByRefreshToken(refreshTokenRequest);

  if(!authenticationResult) {
    throw new AuthenticationError("Failed to get new access token from refresh token");
  }

  type Attendee = {
    emailAddress: {
      address: string
    },
    type: 'required' | 'optional'
  };
  const attendees: Attendee[] = attendeeEmailAddresses.map((address) => {
    const attendee: Attendee = {
      emailAddress: {
        address
      },
      type: 'required'
    };
    return attendee;
  });

  const options: Options = {
    authProvider: function (done: AuthProviderCallback): void {
      done("Authentication error", authenticationResult.accessToken);
    }
  };
  const client = Client.init(options);

  const content = `
  <p>Autogenerated meeting from /meet</p>
  <a href="${meetingUrl}">Join here</a> or copy ${meetingUrl} to your browser.
  `;
  const event = {
    subject: `${meetingOptions.name}`,
    body: {
      contentType: 'HTML',
      content
    },
    start: {
      dateTime: meetingOptions.startDate.toISOString(),
      timeZone
    },
    end: {
      dateTime: meetingOptions.endDate?.toISOString(),
      timeZone
    },
    location: {
      displayName: 'GMeet'
    },
    attendees,
    allowNewTimeProposals: false
  };

  await client.api("/me/events").post(event);
}
